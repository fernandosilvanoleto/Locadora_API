// <auto-generated />
using System;
using Locadora_API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Locadora_API.Persistence.Migrations
{
    [DbContext(typeof(LocadoraDbContext))]
    partial class LocadoraDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Locadora_API.Entity.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasFilter("[Nome] IS NOT NULL");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Locadora_API.Entity.EstoqueFilme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FilmeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmeId")
                        .IsUnique();

                    b.ToTable("EstoqueFilme");
                });

            modelBuilder.Entity("Locadora_API.Entity.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Filmes");
                });

            modelBuilder.Entity("Locadora_API.Entity.Locacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlocacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDevolucaoEntregaPeloCliente")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDevolucaoPrevista")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmeId")
                        .HasColumnType("int");

                    b.Property<int?>("FilmeId1")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("FilmeId");

                    b.HasIndex("FilmeId1");

                    b.ToTable("Locacao");
                });

            modelBuilder.Entity("Locadora_API.Entity.EstoqueFilme", b =>
                {
                    b.HasOne("Locadora_API.Entity.Filme", "Filme")
                        .WithOne("EstoqueFilme")
                        .HasForeignKey("Locadora_API.Entity.EstoqueFilme", "FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filme");
                });

            modelBuilder.Entity("Locadora_API.Entity.Locacao", b =>
                {
                    b.HasOne("Locadora_API.Entity.Cliente", null)
                        .WithMany("Locacoes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Locadora_API.Entity.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId1");

                    b.HasOne("Locadora_API.Entity.Filme", null)
                        .WithMany("Locacoes")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Locadora_API.Entity.Filme", "Filme")
                        .WithMany()
                        .HasForeignKey("FilmeId1");

                    b.Navigation("Cliente");

                    b.Navigation("Filme");
                });

            modelBuilder.Entity("Locadora_API.Entity.Cliente", b =>
                {
                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("Locadora_API.Entity.Filme", b =>
                {
                    b.Navigation("EstoqueFilme");

                    b.Navigation("Locacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
